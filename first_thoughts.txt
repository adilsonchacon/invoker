func CallMethod(iValue interface{}, methodName string, args ...interface{}) ([]reflect.Value, error) {
	var finalMethod reflect.Value

	inputs := convertArgsToReflectValue(args)
	value, ptr := initializeValueAndItsPointer(iValue)

	methodValue := value.MethodByName(methodName)
	methodPtr := ptr.MethodByName(methodName)
	if methodValue.IsValid() {
		finalMethod = methodValue
	} else if methodPtr.IsValid() {
		finalMethod = methodPtr
	}

	if finalMethod.IsValid() {
		return finalMethod.Call(inputs), nil
	}

	return []reflect.Value{}, errors.New("method not found")
}

func CallMethodAndReturnSingleBool(iValue interface{}, methodName string, args ...interface{}) (bool, error) {
	reflectValues, error := CallMethod(iValue, methodName, args)
	if error == nil && len(reflectValues) > 0 {
		v := reflect.ValueOf(reflectValues[0])
		return v.Interface().(bool), nil
	} else {
		return false, error
	}
}

func convertArgsToReflectValue(args ...interface{}) []reflect.Value {
	var inputs []reflect.Value
	for i, _ := range args {
		inputs = append(inputs, reflect.ValueOf(args[i]))
	}

	return inputs
}

func initializeValueAndItsPointer(iValue interface{}) (reflect.Value, reflect.Value) {
	var ptr reflect.Value
	var value reflect.Value

	switch v := iValue.(type) {
	case reflect.Value:
		value = v
	default:
		value = reflect.ValueOf(iValue)
	}

	// if we start with a pointer, we need to get value pointed to
	// if we start with a value, we need to get a pointer to that value
	if value.Type().Kind() == reflect.Ptr {
		ptr = value
		value = ptr.Elem()
	} else {
		ptr = reflect.New(reflect.TypeOf(iValue))
		temp := ptr.Elem()
		temp.Set(value)
	}

	return value, ptr
}
